echo "[init] ************************************************************"
echo "[init] *** PX4_ASL startup script"
echo "[init] ************************************************************"

################################################ 
# CONFIGURATION-SPECIFIC PARAMETERS
################################################

# HIL: If Hardware-In-the-Loop is used (HIL==yes), then the GCS-telemetry link uses high baud rate (-> use a cable for HIL!)
set HIL no

# AIRPLANE (EasyGlider, Techpod, AtlantikSolar, SenseSoar)
set AIRPLANE EasyGlider

# Onboard Computer used? If OBC==yes, then a second mavlink instance will be started
set OBC no

# Just output the current settings

echo "[init] HIL:      " $HIL
echo "[init] AIRPLANE: " $AIRPLANE 
echo "[init] OBC:      " $OBC
echo "[init] ************************************************************"

echo ""
echo "*******************************************************************"
ver git
ver bdate
echo "*******************************************************************"
echo ""


# Do auto-config based on the above parameters

if [ $AIRPLANE == EasyGlider ]
then
	set MIXER ASL_EasyGlider
	set AIRPLANE_NR_EKF 1
	param set SENS_BOARD_ROT 12
fi
if [ $AIRPLANE == Techpod ]
then
	set MIXER ASL_TechPod
	set AIRPLANE_NR_EKF 3
	param set SENS_BOARD_ROT 8
fi
if [ $AIRPLANE == AtlantikSolar ]
then
	set MIXER ASL_AtlantikSolar
	set AIRPLANE_NR_EKF 2
	param set SENS_BOARD_ROT 8
fi
if [ $AIRPLANE == SenseSoar ]
then
	set MIXER ASL_SenseSoar
	set AIRPLANE_NR_EKF 0
	param set SENS_BOARD_ROT 12
fi
unset AIRPLANE

if [ $HIL == yes ]
then
	# Overwrite mixer for HIL
	set MIXER ASL_EasyGlider_HIL
fi
	
################################################
# DEFAULT PARAMETERS
################################################

set MAV_TYPE 1
set MIXER_AUX none
set PWM_OUT none
set PWM_RATE none
set PWM_DISARMED none
set PWM_MIN none
set PWM_MAX none
set FAILSAFE none
set PWM_AUX_OUT none
set PWM_AUX_RATE none
set PWM_AUX_DISARMED none
set PWM_AUX_MIN none
set PWM_AUX_MAX none
set FAILSAFE_AUX none
set EXIT_ON_END no
set GPS yes
set GPS_FAKE no
set USE_IO yes
set IO_PRESENT no
set FMU_MODE serial



if [ $HIL == yes ]
then
	set OUTPUT_MODE hil
	set GPS no
else
	set OUTPUT_MODE io
fi

unset FCONFIG
unset MODE

#####################################################
# INITIAL BOOTUP
#####################################################

#
# Start the ORB (first app to start)
#
uorb start

#
# Load non-volatile parameters
#
set PARAM_FILE /fs/microsd/params

param select $PARAM_FILE
if param load
then
	echo "[param] Loaded: $PARAM_FILE"
else
	echo "[param] FAILED loading $PARAM_FILE"
	if param reset
	then
	fi
fi
unset PARAM_FILE

#
# Check if PX4IO present and update firmware if needed
#

if [ -f /etc/extras/px4io-v2_default.bin ]
then
	set IO_FILE /etc/extras/px4io-v2_default.bin
else
	set IO_FILE /etc/extras/px4io-v1_default.bin
fi

if px4io checkcrc ${IO_FILE}
	then
		echo "PX4IO CRC OK" >> $LOG_FILE

	set IO_PRESENT yes
else
	echo "PX4IO Trying to update" >> $LOG_FILE

	tone_alarm MLL32CP8MB

	if px4io start
	then
		# try to safe px4 io so motor outputs dont go crazy
		if px4io safety_on
		then
			# success! no-op
		else
			# px4io did not respond to the safety command
			px4io stop
		fi
	fi

	if px4io forceupdate 14662 ${IO_FILE}
	then
		usleep 500000
		if px4io checkcrc $IO_FILE
		then
			echo "PX4IO CRC OK after updating" >> $LOG_FILE
			tone_alarm MLL8CDE
			set IO_PRESENT yes
		else
			echo "ERROR: PX4IO update failed" >> $LOG_FILE
			tone_alarm $TUNE_ERR
		fi
	else
		echo "ERROR: PX4IO update failed" >> $LOG_FILE
		tone_alarm $TUNE_ERR
	fi
fi
unset IO_FILE

if [ $IO_PRESENT == no ]
then
	echo "[i] ERROR: PX4IO not found"
	echo "ERROR: PX4IO not found" >> $LOG_FILE
	tone_alarm $TUNE_ERR
fi
unset IO_PRESENT

#
# Start the datamanager (and do not abort boot if it fails)
#
if dataman start
then
fi

#####################################################
# SENSORS
#####################################################

if ms5611 start
then
fi

if adc start
then
fi

# start the airspeed sensor:
if [ $HIL == no ]
then
	if sdp600 start
	then
	else
		# start I2C_WD application and hdim010 pressure sensor
#		i2c_wd start
#		usleep 1000000
#		hdim010 start
	fi
fi

# start the ambient temperature sensor LM73
#lm73 start

# start power board voltage sensor
#adc121_vspb start

# start power board current sensor
#adc121_cspb start

# start current sensor board 1
#adc121_cs1 start

# start current sensor board 2
#adc121_cs2 start

# start MPPTs interface
#spv1020 start -d 3

# Start IMU and Magnetometer
if adis16448 start 
then
	echo "using adis16448"
else
	echo "using MPU6000 and HMC5883L"
	param set SENS_BOARD_ROT 0
	
#	if mpu6000 -X start
#	then
#	fi

	if mpu6000 start
	then
	fi
	
	# MAG selection
	if param compare SENS_EXT_MAG 2
	then
		if hmc5883 -I start
		then
		fi
	else
		# Use only external as primary
		if param compare SENS_EXT_MAG 1
		then
			if hmc5883 -X start
			then
			fi
		else
		# auto-detect the primary, prefer external
			if hmc5883 start
			then
			fi
		fi
	fi
fi

#
# Start sensors
#
sensors start

if [ $GPS == yes ]
then
	echo "[init] Start GPS"
	if [ $GPS_FAKE == yes ]
	then
		echo "[init] Faking GPS"
		gps start -f
	else
		gps start
	fi
fi
unset GPS_FAKE
unset GPS

#
# Start the Commander (needs to be this early for in-air-restarts)
#
commander start

#####################################################
# OUTPUT (PX4IO & HIL) CONFIGURATION
#####################################################


if [ $OUTPUT_MODE == hil ]
then
	if hil mode_port2_pwm8
	then
		echo "[i] HIL output started"
	else
		echo "[i] ERROR: HIL output start failed"
		echo "ERROR: HIL output start failed" >> $LOG_FILE
		tone_alarm $TUNE_ERR
	fi
fi

if px4io start
then
	sh /etc/init.d/rc.io
else
	echo "ERROR: PX4IO start failed" >> $LOG_FILE
	tone_alarm $TUNE_ERR
fi

if fmu mode_$FMU_MODE
then
	echo "[i] FMU mode_$FMU_MODE started"
else
	echo "[i] ERROR: FMU mode_$FMU_MODE start failed"
	echo "ERROR: FMU mode_$FMU_MODE start failed" >> $LOG_FILE
	tone_alarm $TUNE_ERR
fi

# Load mixer and configure outputs
sh /etc/init.d/rc.interface
param set MAV_TYPE $MAV_TYPE


unset MIXER
unset MAV_TYPE
unset OUTPUT_MODE
unset MIXER_AUX
unset PWM_OUT
unset PWM_RATE
unset PWM_DISARMED
unset PWM_MIN
unset PWM_MAX
unset FAILSAFE
unset PWM_AUX_OUT
unset PWM_AUX_RATE
unset PWM_AUX_DISARMED
unset PWM_AUX_MIN
unset PWM_AUX_MAX
unset FAILSAFE_AUX
unset USE_IO
unset FMU_MODE

#####################################################
# MAVLINK
#####################################################

# Start MAVLink instance #0 (to Ground Control Station) through external script
if [ -f /fs/microsd/etc/telem_config/telem0.txt ]
then
	echo "[MAVLINK] Start MAVLINK instance #0 (to Ground Control Station)"
	sh /fs/microsd/etc/telem_config/telem0.txt
fi

# Start MAVLink instance #1 (to Onboard Computer) through external script 
if [ -f /fs/microsd/etc/telem_config/telem1.txt -a $OBC == yes ]
then
	echo "[MAVLINK] Start MAVLINK instance #1 (to Onboard Computer)"
	sh /fs/microsd/etc/telem_config/telem1.txt
fi 
unset HIL

#####################################################
# LOGGING
#####################################################

if [ -d /fs/microsd -a $OBC == no ]
then
	echo "Start sdlog2"
	sdlog2 start -r 10 -a -b 4 -t
else
	echo "Not using sdlog2 because OBC is connected"
fi
unset OBC

#####################################################
# ESTIMATION AND CONTROL
#####################################################

#
# Start state estimator
#
#ekf_att_pos_estimator start
state_estimator start -d $AIRPLANE_NR_EKF
unset AIRPLANE_NR_EKF

#
# Start controllers
#
aslctrl start

#
# Start the navigator
#
navigator start


#####################################################
# CUSTOM ADDONS
#####################################################

